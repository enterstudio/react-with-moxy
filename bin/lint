#!/usr/bin/env node

'use strict';

const yargs = require('yargs');
const planify = require('planify');
const eslint = require('eslint');
const stylelint = require('stylelint');
const path = require('path');
const spawnSync = require('child_process').spawnSync;
const projectDir = `${__dirname}/..`;

// ---------------------------------------------------------
// CLI definition
// ---------------------------------------------------------

const argv = yargs
.strict()
.wrap(Math.min(120, yargs.terminalWidth()))
.help('help').alias('help', 'h')
.usage('Usage: ./$0 [options]')
.demand(0, 1)
.option('lint-output', {
    alias: 'l',
    type: 'boolean',
    describe: 'Show the lint output',
    default: true,
})
.option('reporter', {
    alias: ['r', 'R'],
    type: 'string',
    describe: 'Any of the planify\'s reporters',
})
.argv;

if (argv.help) {
    yargs.showHelp('log');
    process.exit(0);
}

// ---------------------------------------------------------
// Functions
// ---------------------------------------------------------

function runEslint(files) {
    const CLIEngine = eslint.CLIEngine;
    const cli = new CLIEngine({
        fix: true,
    });
    const report = cli.executeOnFiles(files);

    // output fixes to disk
    CLIEngine.outputFixes(report);

    if (argv.lintOutput) {
        const formatter = cli.getFormatter();
        const output = formatter(report.results).trim();

        output && process.stdout.write(`${output}\n`);
    }

    if (report.errorCount) {
        throw new Error(`eslint reported ${report.errorCount} error(s)`);
    }
}

function runStylelint(files) {
    return stylelint.lint({
        files,
        formatter: 'string',
    })
    .then((result) => {
        const output = result.output.trim();

        if (argv.lintOutput) {
            output && process.stdout.write(`${output}\n\n`);
        }

        if (result.errored) {
            throw new Error('stylelint result contains errors');
        }
    });
}

function getStagedFiles(target) {
    const params = ['diff', '--name-only', 'src', 'config'];

    if (target === 'staged') {
        params.splice(2, 0, '--cached');
    }

    const cmd = spawnSync('git', params);
    const files = `${cmd.stdout.toString()}`.split('\n');
    const jsFiles = [];
    const cssFiles = [];

    files.forEach((file) => {
        const fileExtension = path.extname(file);

        switch (fileExtension) {
        case '.js':
            jsFiles.push(file);
            break;

        case '.css':
            cssFiles.push(file);
            break;

        default:
            break;
        }
    });

    return { jsFiles, cssFiles };
}

// ---------------------------------------------------------
// Steps
// ---------------------------------------------------------

planify({ exit: true, reporter: argv.reporter })
.step('Init Linting', (data) => {
    const lintTarget = argv._[0];

    if (lintTarget) {
        data.files = getStagedFiles(lintTarget);
    }
})
.step('Running es-lint', ({ files }) => {
    if (!files) {
        return runEslint([`${projectDir}/src/**/*.js`, `${projectDir}/config/**/*.js`]);
    }

    const { jsFiles } = files;

    return jsFiles && jsFiles.length && runEslint(jsFiles);
})
.step('Running stylelint', ({ files }) => {
    if (!files) {
        return runStylelint([`${projectDir}/src/**/*.css`]);
    }

    const { cssFiles } = files;

    return cssFiles && cssFiles.length && runStylelint(cssFiles);
})
.run();
